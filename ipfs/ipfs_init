
# export version=1.0.7
# export IPFS_PATH="${PWD}/.ipfs"
# export cache_dir="${IPFS_PATH}/.cache"
# export GNUPGHOME="${IPFS_PATH}/.gpg"
# export sockets="${IPFS_PATH}/.sockets"
# export pid_file="${IPFS_PATH}/.pid"
# export ipfs_subd_gw="${IPFS_SUBD_GW:-https://cf-ipfs.com}" # For redirects
# export ipfs_path_gw="${IPFS_PATH_GW:-https://ipfs.io}" # For direct downloads
# export blacklist_file="${IPFS_PATH}/blacklist.txt"

#if [[ "$(ipfs config App)" != "ipns-link-gatewayV${version}" ]]; then
ipfs init --profile server || ipfs config profile apply server # Disallow local discovery & private IPs
ipfs config --json Experimental.Libp2pStreamMounting true
ipfs config --json Experimental.P2pHttpProxy true
ipfs config Reprovider.Strategy roots
ipfs config Routing.Type dhtclient
ipfs config Swarm.ConnMgr.Type basic
ipfs config Swarm.ConnMgr.GracePeriod 5s
ipfs config --json Swarm.ConnMgr.LowWater 0
ipfs config --json Swarm.ConnMgr.HighWater 2
ipfs config --bool Swarm.EnableRelayHop false
ipfs config --bool Swarm.DisableNatPortMap true
ipfs config --bool Swarm.EnableAutoRelay false
ipfs config AutoNAT.ServiceMode disabled
# Ref: https://docs.ipfs.io/how-to/peering-with-content-providers/#content-provider-list
ipfs config --json Peering.Peers '[
    {"ID":"QmcfgsJsMtx6qJb74akCw1M24X1zFwgGo11h1cuhwQjtJP"},
    {"ID":"QmWaik1eJcGHq1ybTWe7sezRfqKNcDRNkeBaLnGwQJz1Cj"},
    {"ID":"QmNfpLrQQZr5Ns9FAJKpyzgnDL2GgC6xBug1yUZozKFgu4"},
    {"ID":"QmPo1ygpngghu5it8u4Mr3ym6SEU2Wp2wA66Z91Y1S1g29"},
    {"ID":"QmRjLSisUCHVpFa5ELVvX3qVPfdxajxWJEHs9kN3EcxAW6"},
    {"ID":"QmPySsdmbczdZYBpbi2oq2WMJ8ErbfxtkG8Mo192UHkfGP"},
    {"ID":"QmSarArpxemsPESa6FNkmuu9iSE1QWqPX2R3Aw6f5jq4D5"},
    {"ID":"QmUEMvxS2e7iDrereVYc5SWPauXPyNwxcy9BXZrC1QTcHE"},
    {"ID":"QmNSYxZAiJHeLdkBg38roksAR9So7Y5eojks1yjEcUtZ7i"},
    {"ID":"QmUd6zHcbkbcs7SMxwLs48qZVX3vpcM8errYS7xEczwRMA"},
    {"ID":"QmbVWZQhCGrS7DhgLqWbgvdmKN7JueKCREVanfnVpgyq8x"},
    {"ID":"QmdnXwLrC8p1ueiq2Qya8joNvk3TVVDAut7PrikmZwubtR"},
    {"ID":"12D3KooWCRscMgHgEo3ojm8ovzheydpvTEqsDtq7Vby38cMHrYjt"},
    {"ID":"12D3KooWQtpvNvUYFzAo1cRYkydgk15JrMSHp6B6oujqgYSnvsVm"},
    {"ID":"12D3KooWQcgCwNCTYkyLXXQSZuL5ry1TzpM8PRe9dKddfsk1BxXZ"}
    ]'
ipfs config --json Gateway.PublicGateways '{
    "forBase36": {"NoDNSLink":true,"Paths":["/p2p"],"UseSubdomains": true},
    "localhost": {"NoDNSLink":false,"Paths":["/ipfs","/ipns"],"UseSubdomains": false}
    }'
ipfs config --json Gateway.HTTPHeaders.Access-Control-Allow-Methods '["GET", "PUT", "POST", "HEAD", "DELETE", "PATCH", "OPTIONS"]'
mkdir -p "${sockets}" "${cache_dir}"
# ipfs config Addresses.API "/unix/${sockets}/api"
# ipfs config Addresses.Gateway "/unix/${sockets}/gateway"
rm -rf "${GNUPGHOME}" ; mkdir -p "${GNUPGHOME}"
gpg --batch -q --gen-key << EOF
%no-protection
Key-Type: EDDSA
  Key-Curve: ed25519
Subkey-Type: ECDH
  Subkey-Curve: cv25519
Name-Real: "${webhost_name}"
Expire-Date: 0
EOF
#(($? == 0)) && gpg --export -a > pubkey || return 1
gpg --export -a > pubkey
ipfs config App "ipns-link-gatewayV${version}"
#fi
ipfs config profile apply randomports; rm -f "${IPFS_PATH}/config-pre-"*
#(ipfs swarm peers || rm -f "${sockets}"/*) # Otherwise API and Gateway won't bind to existing UNIX socket
# TODO: Handle SIGHUP on `main` exit better.
# Without the following `setsid`, `ipfs daemon` surprisingly exits with SIGHUP, even with `nohup`, when `main` exits
# The `setsid`, thanks to its own subshell, doesn't fork and `exec`s into ipfs daemon. Hence they have same pid.
#[[ "$((setsid ipfs daemon --enable-namesys-pubsub --enable-gc & echo $! > "${pid_file}") | grep -iom1 'Daemon is ready' & tail -f --pid=$! /dev/null)" ]] || return 1 # Launcher
#ipfs daemon --enable-namesys-pubsub --enable-gc